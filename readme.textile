h1. Events.js

h3. A super-awesome JavaScript event handler library

Author: James Brumond
Version: 0.1.1-beta

Copyright 2011 James Brumond
Dual licensed under MIT and GPL

h2. Features

* Simple, easy-to-use API
* Event namespacing
* Cross-browser support for some commonly unsupported events (hashchange, mouseenter, mouseleave)
* System for defining custom events

h2. API

h3. Functions

h4. void Events.bind ( object target, string event, function callback )

Bind an event function to the given target.

<pre><code>Events.bind(window, 'load', function(e) {
    // Do something on page load
});</code></pre>

h4. void Events.unbind ( object target[, string event ])

Unbind event functions from the given target. If no event is given, all events will be unbound.

<pre><code>Events.unbind(window, 'load');</code></pre>

h4. void Events.invoke ( object target[, string event[, object info ]])

Invoke an event. If given, the properties of the info object will be passed on to the event object.

<pre><code>Events.invoke(window, 'load');</code></pre>

h4. object Events.buildEventObject ( string type[, object info[, object extra ]])

Create an event object. @type@ is the event type, such as "load" or "mouseover". @info@ is information about the event such as the mouse position during the event. Which values are needed changes based on the event type. @extra@ is for any other values you may want to add onto the event object.

<pre><code>var myOnloadEvent = Events.createEventObject('load');
var myKeypressEvent = Events.createEventObject('keypress', {
    ctrlKey: true
});</code></pre>

h4. boolean Events.specialEvents.exists ( string event )

Tests if a special event has been defined.

<pre><code>if (Events.specialEvents.exists('mouseenter')) {
    Events.bind(myElement, 'mouseenter', function() {
        doSomethingCool();
    });
}</code></pre>

h4. void Events.specialEvents.add ( string event, object definition )

Creates a special event. Special events can be defined in two different ways.

First, you can give an @attachesTo@ event and an @eventTest@ function. In this format, whenever the @attachesTo@ event is fired, the @eventTest@ function will be run, and if it returns @true@, the special event is fired.

<pre><code>var mouseIsClicked = false;
Events.specialEvents.add('drag', {
    attachesTo: 'mousemove',
    eventTest: function(evt) {
        return mouseIsClicked;
    }
});</code></pre>

The second format gives you a little more direct control. You provide @bind@, @unbind@, and @invoke@ functions which are called at the appropriate times, and your functions then do all the direct event handling.

<pre><code>Events.specialEvents.add('drop', {
    bind: function(target, func) {
        Events.bind(target, 'mouseup', func);
    },
    unbind: function(target, func) {
        Events.unbind(target, 'mouseup');
    },
    invoke: function(target) {
        Events.invoke(target, 'mouseup');
    }
});</code></pre>

h4. void Events.log ( mixed item[, ... ])

A standardized abstraction of @console.log()@. Prepends a human-readable timestamp to the output.

<pre><code>Events.bind(window, 'load', function(e) {
    Events.log('window onload event fired');
});
// Outputs something like:
// [Sun Apr 10 2011 07:02:39 GMT-0700 (PDT)] - window onload event fired</code></pre>



